{
	"info": {
		"_postman_id": "8d2b375f-e632-44f0-9124-cce1c850babb",
		"name": "Association",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20307148"
	},
	"item": [
		{
			"name": "Create a Valid City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"city_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Buenos Aires\",\n    \"country\": \"Argentina\",\n    \"population\": 2000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities"
					]
				}
			},
			"response": [
				{
					"name": "Create a Valid City",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Buenos Aires\",\n    \"country\": \"Argentina\",\n    \"population\": 2000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Buenos Aires\",\n    \"country\": \"Argentina\",\n    \"population\": 2000,\n    \"id\": \"55a81c33-47ba-42d0-a782-b5c0c748e8b7\"\n}"
				}
			]
		},
		{
			"name": "Create a Valid Supermarket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"supermarket_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Create a Valid Supermarket",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\",\n    \"id\": \"27eb65fb-8fae-4e69-92a5-be4c9a839bc4\"\n}"
				}
			]
		},
		{
			"name": "Create a Valid Supermarket 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"supermarket_id_2\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Create a Valid Supermarket",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\",\n    \"id\": \"27eb65fb-8fae-4e69-92a5-be4c9a839bc4\"\n}"
				}
			]
		},
		{
			"name": "Associate New Supermarket To a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Associate New Supermarket To a City",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"f7833e29-c593-4905-bb88-a6a95e72251e\",\n    \"name\": \"Buenos Aires\",\n    \"country\": \"Argentina\",\n    \"population\": 2000,\n    \"supermarkets\": [\n        {\n            \"id\": \"7f7f641f-81b4-45a8-866f-1fa39ae7a646\",\n            \"name\": \"Carulla New Test\",\n            \"longitude\": 2000,\n            \"latitude\": 3000,\n            \"webPage\": \"http://localhost.com\",\n            \"cities\": []\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Associate Non Existing Supermarket To a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{invalid_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Associate Non Existing Supermarket To a City",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{invalid_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"supermarket with given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get All Supermarkets In a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Get All Supermarkets In a City",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"d3f9f41e-d1a2-4d9d-aa9b-8627f2caf6fa\",\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get a Supermarket By City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a Supermarket By City",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"d3f9f41e-d1a2-4d9d-aa9b-8627f2caf6fa\",\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}"
				}
			]
		},
		{
			"name": "Get a Supermarket Not Associated To a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a Supermarket Not Associated To a City",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id_2}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 400,\n    \"message\": \"supermarket with the given id is not associated\"\n}"
				}
			]
		},
		{
			"name": "Update Associated Supermarkets In a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"{{supermarket_id_2}}\"\n    },\n        {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"{{supermarket_id}}\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Update Associated Supermarkets In a City",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"5b372f0e-a269-4a6b-812c-e20b37438049\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"186b5582-1395-4fd6-8c34-0bf521921998\",\n    \"name\": \"Buenos Aires\",\n    \"country\": \"Argentina\",\n    \"population\": 2000,\n    \"supermarkets\": [\n        {\n            \"name\": \"Carulla New Test\",\n            \"longitude\": 2000,\n            \"latitude\": 3000,\n            \"webPage\": \"http://localhost.com\",\n            \"id\": \"5b372f0e-a269-4a6b-812c-e20b37438049\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Update Associated Supermarkets In a City With One Not Existing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"5b372f0e-a269-4a6b-812c-e20b37438049\"\n    },\n    [\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"{{invalid_id}}\"\n    }\n]\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Update Associated Supermarkets In a City With One Not Existing",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"5b372f0e-a269-4a6b-812c-e20b37438049\"\n    },\n    [\n    {\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"id\": \"{{invalid_id}}\"\n    }\n]\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"supermarket with given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete Associated Supermarket In a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Associated Supermarket In a City",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete Unassociated Supermarket In a City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with the given id is not associated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Unassociated Supermarket In a City",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 400,\n    \"message\": \"supermarket with the given id is not associated\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http",
			"type": "string"
		},
		{
			"key": "apiUrl",
			"value": "127.0.0.1:3000",
			"type": "string"
		},
		{
			"key": "invalid_id",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "city_id",
			"value": ""
		},
		{
			"key": "supermarket_id",
			"value": ""
		},
		{
			"key": "supermarket_id_2",
			"value": ""
		}
	]
}