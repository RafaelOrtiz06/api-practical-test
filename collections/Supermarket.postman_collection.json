{
	"info": {
		"_postman_id": "9fca3199-d64b-4a34-ae6c-a5e23142e0ed",
		"name": "Supermarket",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20307148"
	},
	"item": [
		{
			"name": "Create a Valid Supermarket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"supermarket_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Create a Valid Supermarket",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\",\n    \"id\": \"27eb65fb-8fae-4e69-92a5-be4c9a839bc4\"\n}"
				}
			]
		},
		{
			"name": "Create an Invalid Supermarket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Carulla\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Create an Invalid Supermarket",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Carulla\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": [\n        \"name must be longer than or equal to 10 characters\"\n    ],\n    \"error\": \"Bad Request\",\n    \"statusCode\": 400\n}"
				}
			]
		},
		{
			"name": "Get All Supermarkets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets"
					]
				}
			},
			"response": [
				{
					"name": "Get All Supermarkets",
					"originalRequest": {
						"method": "GET",
						"header": []
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"8f949ca4-0952-419d-a776-590dba3c5be5\",\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"cities\": []\n    },\n    {\n        \"id\": \"27eb65fb-8fae-4e69-92a5-be4c9a839bc4\",\n        \"name\": \"Carulla New Test\",\n        \"longitude\": 2000,\n        \"latitude\": 3000,\n        \"webPage\": \"http://localhost.com\",\n        \"cities\": []\n    }\n]"
				}
			]
		},
		{
			"name": "Get Supermarket By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get Supermarket By Id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"8f949ca4-0952-419d-a776-590dba3c5be5\",\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 2000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\",\n    \"cities\": []\n}"
				}
			]
		},
		{
			"name": "Get Supermarket By Non Existing Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get Supermarket By Non Existing Id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"supermarket with given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update a Supermarket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"longitude\": 10000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Update a Supermarket",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"longitude\": 10000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"8f949ca4-0952-419d-a776-590dba3c5be5\",\n    \"name\": \"Carulla New Test\",\n    \"longitude\": 10000,\n    \"latitude\": 3000,\n    \"webPage\": \"http://localhost.com\",\n    \"cities\": []\n}"
				}
			]
		},
		{
			"name": "Update a Supermarket With Non Existing Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"longitude\": 10000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Update a Supermarket With Non Existing Id",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"longitude\": 10000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"supermarket with given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a Supermarket By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{supermarket_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a Supermarket By Id",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{supermarket_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a City With Non Existing Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get the expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"supermarket with given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"supermarkets",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a City With Non Existing Id",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{apiUrl}}/supermarkets/{{invalid_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"supermarkets",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"supermarket with given id was not found\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http",
			"type": "string"
		},
		{
			"key": "apiUrl",
			"value": "127.0.0.1:3000",
			"type": "string"
		},
		{
			"key": "invalid_id",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "supermarket_id",
			"value": ""
		}
	]
}